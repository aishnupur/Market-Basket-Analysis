mat1 <- matrix(data = c(0,1/2,0,1/2,0,0,0,0,1,0,0,0,1/2,0,0,0,1/2,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0), nrow = 6, ncol = 6)
View(mat1)
tel1 = 0.1
tel2 = 0.2
tel3 = 0.4
mat2 <- matrix(data = c(1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6), nrow = 6, ncol = 6)
current_rank <- matrix(data = c(1,1,1,1,1,1),nrow = 6,ncol = 1)
flag <- FALSE
k = 0
while (flag==FALSE) {
m=0
new_rank <- mat1 %*% current_rank
difference <- new_rank - current_rank
current_rank <- new_rank
for (i in 1:6) {
if(difference[i,1] > 0.001 || difference[i,1]< -0.001)
{
m = m+1
}
if(m>0)
{
flag = FALSE
}
else
{
flag = TRUE
}
}
k= k+1
}
print(k)
mat3 = 0.1 * mat1 + 0.9 * mat2
current_rank2 <- matrix(data = c(1,1,1,1,1,1),nrow = 6,ncol = 1)
flag2 <- FALSE
k2 = 0
while (flag2==FALSE) {
m2=0
new_rank2 <- mat3 %*% current_rank2
difference2 <- new_rank2 - current_rank2
current_rank2 <- new_rank2
for (i in 1:6) {
if(difference2[i,1] > 0.001 || difference2[i,1]< -0.001)
{
m2 = m2+1
}
if(m2>0)
{
flag2 = FALSE
}
else
{
flag2 = TRUE
}
}
k2= k2+1
}
print(k2)
mat4 = 0.2 * mat1 + 0.8 * mat2
current_rank3 <- matrix(data = c(1,1,1,1,1,1),nrow = 6,ncol = 1)
flag3 <- FALSE
k3 = 0
while (flag3==FALSE) {
m3=0
new_rank3 <- mat4 %*% current_rank3
difference3 <- new_rank3 - current_rank3
current_rank3 <- new_rank3
for (i in 1:6) {
if(difference3[i,1] > 0.001 || difference3[i,1]< -0.001)
{
m3 = m3+1
}
if(m3>0)
{
flag3 = FALSE
}
else
{
flag3 = TRUE
}
}
k3= k3+1
}
print(k3)
mat5 = 0.4 * mat1 + 0.6 * mat2
current_rank4 <- matrix(data = c(1,1,1,1,1,1),nrow = 6,ncol = 1)
flag4 <- FALSE
k4 = 0
while (flag4==FALSE) {
m4=0
new_rank4 <- mat5 %*% current_rank4
difference4 <- new_rank4 - current_rank4
current_rank4 <- new_rank4
for (i in 1:6) {
if(difference4[i,1] > 0.001 || difference4[i,1]< -0.001)
{
m4 = m4+1
}
if(m4>0)
{
flag4 = FALSE
}
else
{
flag4 = TRUE
}
}
k4= k4+1
}
print(k4)
library(randomForest)
classifier_rf = randomForest(x = training_set2[,2:7],
y = training_set2$TripType,
ntree = 500)
train_data <- read.csv('train.csv')
test_data <- read.csv('test.csv')
train_data.factor <- factor(train_data$TripType)
train_data$TripType <- as.numeric(train_data.factor)
train_data$TripType <- train_data$TripType - 1
train_data$TripType <- factor(train_data$TripType)
#############################DATA PREPROCESSING#########################################
sum(is.na(train_data$FinelineNumber))
row.has.na <- apply(train_data, 1, function(x){any(is.na(x))})
sum(row.has.na)
train_data <- train_data[!row.has.na,]
rownames(train_data) <- seq(length=nrow(train_data))
setwd("C:/Users/golak/OneDrive/Desktop/College ML assignments/Market-Basket-Analysis")
train_data <- read.csv('train.csv')
test_data <- read.csv('test.csv')
train_data.factor <- factor(train_data$TripType)
train_data$TripType <- as.numeric(train_data.factor)
train_data$TripType <- train_data$TripType - 1
train_data$TripType <- factor(train_data$TripType)
#############################DATA PREPROCESSING#########################################
sum(is.na(train_data$FinelineNumber))
row.has.na <- apply(train_data, 1, function(x){any(is.na(x))})
sum(row.has.na)
train_data <- train_data[!row.has.na,]
rownames(train_data) <- seq(length=nrow(train_data))
#############################DATA SPLITTING#############################################
library(caTools)
set.seed(123)
split = sample.split(train_data$TripType, SplitRatio = 0.80)
training_set2 = subset(train_data, split == TRUE)
test_set1 = subset(train_data, split == FALSE)
test_set2 <- test_set1[,2:7]
rownames(training_set2) <- seq(length=nrow(training_set2))
rownames(test_set1) <- seq(length=nrow(test_set1))
rownames(test_set2) <- seq(length=nrow(test_set2))
library(randomForest)
classifier_rf = randomForest(x = training_set2[,2:7],
y = training_set2$TripType,
ntree = 500)
y_pred_rf = predict(classifier_rf, newdata = test_set2)
train_data <- read.csv('train.csv')
test_data <- read.csv('test.csv')
row.has.na <- apply(train_data, 1, function(x){any(is.na(x))})
sum(row.has.na)
train_data <- train_data[!row.has.na,]
rownames(train_data) <- seq(length=nrow(train_data))
library(caTools)
set.seed(123)
split = sample.split(train_data$TripType, SplitRatio = 0.80)
training_set2 = subset(train_data, split == TRUE)
test_set1 = subset(train_data, split == FALSE)
test_set2 <- test_set1[,2:7]
rownames(training_set2) <- seq(length=nrow(training_set2))
rownames(test_set1) <- seq(length=nrow(test_set1))
rownames(test_set2) <- seq(length=nrow(test_set2))
library(randomForest)
classifier_rf = randomForest(x = training_set2[,2:7],
y = training_set2$TripType,
ntree = 500)
y_pred_rf = predict(classifier_rf, newdata = test_set2)
library(randomForest)
classifier_rf = randomForest(x = training_set2[,2:7],
y = training_set2$TripType,
ntree = 500)
View(training_set2)
str(training_set2)
train_data$DepartmentDescription <- factor(train_data$DepartmentDescription)
str(training_set2)
training_set2[] <- lapply(training_set2, function(x) if(is.factor(x)) factor(x) else x)
str(training_set2)
levels(droplevels(training_set2$DepartmentDescription))
str(training_set2)
levels(droplevels(training_set2$Weekday))
str(training_set2)
neg_rows <- apply(train_data, 1, function(row) any(row < 0))
train_data <- read.csv('train.csv')
test_data <- read.csv('test.csv')
train_data.factor <- factor(train_data$TripType)
train_data$TripType <- as.numeric(train_data.factor)
train_data$TripType <- train_data$TripType - 1
train_data$TripType <- factor(train_data$TripType)
#############################DATA PREPROCESSING#########################################
sum(is.na(train_data$FinelineNumber))
row.has.na <- apply(train_data, 1, function(x){any(is.na(x))})
sum(row.has.na)
train_data <- train_data[!row.has.na,]
rownames(train_data) <- seq(length=nrow(train_data))
summary(train_data)
###########################DATA ANALYSIS###############################################
library(ggplot2)
###BAR PLOTS#####
##Visit Number
ggplot(train_data, aes(VisitNumber)) +
geom_bar(fill = "#0073C2FF")
##Trip Type
barplot(table(train_data$TripType), las=2)
##Department Description
barplot(table(train_data$DepartmentDescription), las=2)
#Scan count
barplot(table(train_data$ScanCount), las=2)
###PIE CHART#####
library(plotrix)
table_weekday <- table(train_data$Weekday)
labels_weekday <- paste(names(table_weekday), "\n", table_weekday, sep="")
pie3D(table_weekday, labels = labels_weekday, main="Pie Chart of Departments")
neg_rows <- apply(train_data, 1, function(row) any(row < 0))
neg_rows <- subset(train_data, ScanCount  < 0)
View(neg_rows)
barplot(table(neg_rows$DepartmentDescription), las=2)
library(arules)
train_data <- read.csv('train.csv')
test_data <- read.csv('test.csv')
dataset2 <- data.frame(dataset1$VisitNumber, dataset1$Upc)
names(dataset2) <- c("transaction", "product")
library(plyr)
ordered_data <- ddply(dataset2,c("transaction"),
function(df1)paste(df1$product,collapse = ","))
write.csv(ordered_data,"ordered_data.csv",quote = FALSE,row.names = TRUE)
txn = read.transactions(file = "ordered_data.csv",rm.duplicates = TRUE,format = "basket",sep = ",",cols=1)
basket_rules <- apriori(txn,parameter = list(sup = 0.0006,conf = 0.5,target = "rules"))
inspect(basket_rules)
inspect(sort(basket_rules,by='lift')[1:100])
summary(basket_rules)
library(arules)
train_data <- read.csv('train.csv')
test_data <- read.csv('test.csv')
dataset2 <- data.frame(train_data$VisitNumber, train_data$Upc)
names(dataset2) <- c("transaction", "product")
library(plyr)
ordered_data <- ddply(dataset2,c("transaction"),
function(df1)paste(df1$product,collapse = ","))
write.csv(ordered_data,"ordered_data.csv",quote = FALSE,row.names = TRUE)
txn = read.transactions(file = "ordered_data.csv",rm.duplicates = TRUE,format = "basket",sep = ",",cols=1)
basket_rules <- apriori(txn,parameter = list(sup = 0.0006,conf = 0.5,target = "rules"))
inspect(basket_rules)
inspect(sort(basket_rules,by='lift')[1:100])
summary(basket_rules)
plotly_arules(basket_rules)
install.packages('plotly')
library(plotly)
plotly_arules(basket_rules)
library(plotly)
install.packages('stats')
install.packages('stats')
install.packages("stats")
#install.packages('arules')
library(arules)
train_data <- read.csv('train.csv')
test_data <- read.csv('test.csv')
dataset2 <- data.frame(train_data$VisitNumber, train_data$Upc)
names(dataset2) <- c("transaction", "product")
library(plyr)
ordered_data <- ddply(dataset2,c("transaction"),
function(df1)paste(df1$product,collapse = ","))
write.csv(ordered_data,"ordered_data.csv",quote = FALSE,row.names = TRUE)
txn = read.transactions(file = "ordered_data.csv",rm.duplicates = TRUE,format = "basket",sep = ",",cols=1)
basket_rules <- apriori(txn,parameter = list(sup = 0.0006,conf = 0.5,target = "rules"))
inspect(basket_rules)
inspect(sort(basket_rules,by='lift')[1:100])
summary(basket_rules)
#install.packages('plotly')
install.packages('stats')
library(plotly)
library(ggplot2)
plotly_arules(basket_rules)
install.packages("stats")
txn = read.transactions(file = "ordered_data.csv",rm.duplicates = TRUE,format = "basket",sep = ",",cols=1)
basket_rules <- apriori(txn,parameter = list(sup = 0.0006,conf = 0.5,target = "rules"))
inspect(basket_rules)
inspect(sort(basket_rules,by='lift')[1:100])
summary(basket_rules)
library(plotly)
library(ggplot2)
plotly_arules(basket_rules)
library(arules)
train_data <- read.csv('train.csv')
test_data <- read.csv('test.csv')
dataset2 <- data.frame(train_data$VisitNumber, train_data$Upc)
names(dataset2) <- c("transaction", "product")
library(plyr)
ordered_data <- ddply(dataset2,c("transaction"),
function(df1)paste(df1$product,collapse = ","))
write.csv(ordered_data,"ordered_data.csv",quote = FALSE,row.names = TRUE)
txn = read.transactions(file = "ordered_data.csv",rm.duplicates = TRUE,format = "basket",sep = ",",cols=1)
basket_rules <- apriori(txn,parameter = list(sup = 0.0006,conf = 0.5,target = "rules"))
inspect(basket_rules)
inspect(sort(basket_rules,by='lift')[1:100])
summary(basket_rules)
basket_rules <- apriori(txn,parameter = list(sup = 0.0006,conf = 0.5,target = "rules"))
txn = read.transactions(file = "ordered_data.csv",rm.duplicates = TRUE,format = "basket",sep = ",",cols=1)
basket_rules <- apriori(txn,parameter = list(sup = 0.0006,conf = 0.5,target = "rules"))
inspect(basket_rules)
