mat1 <- matrix(data = c(0,1/2,0,1/2,0,0,0,0,1,0,0,0,1/2,0,0,0,1/2,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0), nrow = 6, ncol = 6)
View(mat1)
tel1 = 0.1
tel2 = 0.2
tel3 = 0.4
mat2 <- matrix(data = c(1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6), nrow = 6, ncol = 6)
current_rank <- matrix(data = c(1,1,1,1,1,1),nrow = 6,ncol = 1)
flag <- FALSE
k = 0
while (flag==FALSE) {
m=0
new_rank <- mat1 %*% current_rank
difference <- new_rank - current_rank
current_rank <- new_rank
for (i in 1:6) {
if(difference[i,1] > 0.001 || difference[i,1]< -0.001)
{
m = m+1
}
if(m>0)
{
flag = FALSE
}
else
{
flag = TRUE
}
}
k= k+1
}
print(k)
mat3 = 0.1 * mat1 + 0.9 * mat2
current_rank2 <- matrix(data = c(1,1,1,1,1,1),nrow = 6,ncol = 1)
flag2 <- FALSE
k2 = 0
while (flag2==FALSE) {
m2=0
new_rank2 <- mat3 %*% current_rank2
difference2 <- new_rank2 - current_rank2
current_rank2 <- new_rank2
for (i in 1:6) {
if(difference2[i,1] > 0.001 || difference2[i,1]< -0.001)
{
m2 = m2+1
}
if(m2>0)
{
flag2 = FALSE
}
else
{
flag2 = TRUE
}
}
k2= k2+1
}
print(k2)
mat4 = 0.2 * mat1 + 0.8 * mat2
current_rank3 <- matrix(data = c(1,1,1,1,1,1),nrow = 6,ncol = 1)
flag3 <- FALSE
k3 = 0
while (flag3==FALSE) {
m3=0
new_rank3 <- mat4 %*% current_rank3
difference3 <- new_rank3 - current_rank3
current_rank3 <- new_rank3
for (i in 1:6) {
if(difference3[i,1] > 0.001 || difference3[i,1]< -0.001)
{
m3 = m3+1
}
if(m3>0)
{
flag3 = FALSE
}
else
{
flag3 = TRUE
}
}
k3= k3+1
}
print(k3)
mat5 = 0.4 * mat1 + 0.6 * mat2
current_rank4 <- matrix(data = c(1,1,1,1,1,1),nrow = 6,ncol = 1)
flag4 <- FALSE
k4 = 0
while (flag4==FALSE) {
m4=0
new_rank4 <- mat5 %*% current_rank4
difference4 <- new_rank4 - current_rank4
current_rank4 <- new_rank4
for (i in 1:6) {
if(difference4[i,1] > 0.001 || difference4[i,1]< -0.001)
{
m4 = m4+1
}
if(m4>0)
{
flag4 = FALSE
}
else
{
flag4 = TRUE
}
}
k4= k4+1
}
print(k4)
setwd("C:/Users/golak/OneDrive/Desktop/College ML assignments/Market-Basket-Analysis")
train_data <- read.csv('train.csv')
test_data <- read.csv('test.csv')
train_data.factor <- factor(train_data$TripType)
train_data$TripType <- as.numeric(train_data.factor)
train_data$TripType <- train_data$TripType - 1
train_data$TripType <- factor(train_data$TripType)
sum(is.na(train_data$FinelineNumber))
row.has.na <- apply(train_data, 1, function(x){any(is.na(x))})
sum(row.has.na)
train_data <- train_data[!row.has.na,]
rownames(train_data) <- seq(length=nrow(train_data))
summary(train_data)
test_data <- test_data[,-c(4)]
variance <- sapply(train_data, var)
variance
train_data <- train_data[,-c(5)]
library(caTools)
set.seed(123)
split = sample.split(train_data$TripType, SplitRatio = 0.80)
training_set2 = subset(train_data, split == TRUE)
test_set1 = subset(train_data, split == FALSE)
test_set2 <- test_set1[,2:6]
rownames(training_set2) <- seq(length=nrow(training_set2))
rownames(test_set1) <- seq(length=nrow(test_set1))
rownames(test_set2) <- seq(length=nrow(test_set2))
View(training_set2)
library(randomForest)
classifier_rf = randomForest(x = training_set2[,2:6],
y = training_set2$TripType,
ntree = 10,do.trace=1)
